# FHIR GraphQL Schema. Version 4.5.0

# import the types from 'types.graphql'

type ObservationDefinition {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: Identifier
  version: String  _version: ElementBase
  title: String  _title: ElementBase
  derivedFromCanonical: canonical  _derivedFromCanonical: [ElementBase]
  derivedFromUri: uri  _derivedFromUri: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  date: dateTime  _date: ElementBase
  publisher: Reference
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: Period
  performerType: CodeableConcept
  category: [CodeableConcept]
  code: CodeableConcept!
  permittedDataType: code  _permittedDataType: [ElementBase]
  multipleResultsAllowed: Boolean  _multipleResultsAllowed: ElementBase
  bodySite: CodeableConcept
  method: CodeableConcept
  specimen: Reference
  device: Reference
  preferredReportName: String  _preferredReportName: ElementBase
  quantitativeDetails: ObservationDefinitionQuantitativeDetails
  qualifiedInterval: [ObservationDefinitionQualifiedInterval]
  validCodedValueSet: Reference
  normalCodedValueSet: Reference
  abnormalCodedValueSet: Reference
  criticalCodedValueSet: Reference
  hasMember: [Reference]
  component: [ObservationDefinitionComponent]
}

type ObservationDefinitionQuantitativeDetails {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  customaryUnit: CodeableConcept
  unit: CodeableConcept
  conversionFactor: decimal  _conversionFactor: ElementBase
  decimalPrecision: Int  _decimalPrecision: ElementBase
}

type ObservationDefinitionQualifiedInterval {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  category: code  _category: ElementBase
  range: Range
  context: CodeableConcept
  appliesTo: [CodeableConcept]
  gender: code  _gender: ElementBase
  age: Range
  gestationalAge: Range
  condition: String  _condition: ElementBase
}

type ObservationDefinitionComponent {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  code: CodeableConcept!
  permittedDataType: code  _permittedDataType: [ElementBase]
  quantitativeDetails: ObservationDefinitionQuantitativeDetails
  qualifiedInterval: [ObservationDefinitionQualifiedInterval]
}

input ObservationDefinitionInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBase
  identifier: IdentifierInput
  version: String  _version: ElementBase
  title: String  _title: ElementBase
  derivedFromCanonical: canonical  _derivedFromCanonical: [ElementBase]
  derivedFromUri: uri  _derivedFromUri: [ElementBase]
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConceptInput
  subjectReference: ReferenceInput
  date: dateTime  _date: ElementBase
  publisher: ReferenceInput
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBase
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  purpose: markdown  _purpose: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: PeriodInput
  performerType: CodeableConceptInput
  category: [CodeableConceptInput]
  code: CodeableConceptInput!
  permittedDataType: code  _permittedDataType: [ElementBase]
  multipleResultsAllowed: Boolean  _multipleResultsAllowed: ElementBase
  bodySite: CodeableConceptInput
  method: CodeableConceptInput
  specimen: ReferenceInput
  device: ReferenceInput
  preferredReportName: String  _preferredReportName: ElementBase
  quantitativeDetails: ObservationDefinitionQuantitativeDetailsInput
  qualifiedInterval: [ObservationDefinitionQualifiedIntervalInput]
  validCodedValueSet: ReferenceInput
  normalCodedValueSet: ReferenceInput
  abnormalCodedValueSet: ReferenceInput
  criticalCodedValueSet: ReferenceInput
  hasMember: [ReferenceInput]
  component: [ObservationDefinitionComponentInput]
}

input ObservationDefinitionQuantitativeDetailsInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  customaryUnit: CodeableConceptInput
  unit: CodeableConceptInput
  conversionFactor: decimal  _conversionFactor: ElementBase
  decimalPrecision: Int  _decimalPrecision: ElementBase
}

input ObservationDefinitionQualifiedIntervalInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  category: code  _category: ElementBase
  range: RangeInput
  context: CodeableConceptInput
  appliesTo: [CodeableConceptInput]
  gender: code  _gender: ElementBase
  age: RangeInput
  gestationalAge: RangeInput
  condition: String  _condition: ElementBase
}

input ObservationDefinitionComponentInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  code: CodeableConceptInput!
  permittedDataType: code  _permittedDataType: [ElementBase]
  quantitativeDetails: ObservationDefinitionQuantitativeDetails
  qualifiedInterval: [ObservationDefinitionQualifiedInterval]
}

type ObservationDefinitionReadType {
  ObservationDefinition(id: ID!): ObservationDefinition
}

type ObservationDefinitionListType {
  ObservationDefinitionList(_filter: String
    category: [token]
    code: [token]
    experimental: [token]
    identifier: [token]
    method: [token]
    status: [token]
    title: [String]
    url: [uri]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [ObservationDefinition]
}

type ObservationDefinitionConnectionType {
  ObservationDefinitionConection(_filter: String
    category: [token]
    code: [token]
    experimental: [token]
    identifier: [token]
    method: [token]
    status: [token]
    title: [String]
    url: [uri]
    _text: [String]
    _content: [String]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [token]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): ObservationDefinitionConnection
}

type ObservationDefinitionConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [ObservationDefinitionEdge]
}

type ObservationDefinitionEdge {
  mode: String
  score: Float
  resource: ObservationDefinition
}

type ObservationDefinitionCreateType {
  ObservationDefinitionCreate(resource: ObservationDefinitionInput): ObservationDefinitionCreation
}

type ObservationDefinitionCreation {
  location: String
  resource: ObservationDefinition
  information: OperationOutcome
}

type ObservationDefinitionUpdateType {
  ObservationDefinitionUpdate(id: ID, resource: ObservationDefinitionInput): ObservationDefinitionUpdate
}

type ObservationDefinitionUpdate {
  resource: ObservationDefinition
  information: OperationOutcome
}

type ObservationDefinitionDeleteType {
  ObservationDefinitionDelete(id: ID): ObservationDefinitionDelete
}

type ObservationDefinitionDelete {
  information: OperationOutcome
}

